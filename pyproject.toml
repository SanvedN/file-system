[project]
name = "file-system"
version = "1.0.0"
description = "Multi-Tenant Async File Management and Extraction System"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
authors = [
    {name = "File System Team", email = "team@filesystem.dev"}
]
keywords = ["fastapi", "file-management", "extraction", "microservices", "async"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: System :: Archiving",
    "Topic :: Text Processing :: General"
]

dependencies = [
    # FastAPI and Web Framework
    "fastapi>=0.117.1",
    "uvicorn[standard]>=0.37.0",
    "starlette>=0.48.0",
    
    # Database (Async PostgreSQL)
    "sqlalchemy[asyncio]>=2.0.43",
    "asyncpg>=0.30.0",
    "alembic>=1.14.0",
    
    # Redis (Async)
    "redis[hiredis]>=5.0.8",
    "aioredis>=2.0.1",
    
    # Data Validation and Serialization
    "pydantic>=2.11.9",
    "pydantic-settings>=2.8.0",
    
    # File Handling and Processing
    "python-multipart>=0.0.20",
    "python-magic>=0.4.27",
    "aiofiles>=24.1.0",
    
    # Environment and Configuration
    "python-dotenv>=1.1.1",
    
    # Utilities
    "structlog>=24.4.0",
    "email-validator>=2.3.0",
    "typing-extensions>=4.15.0",
    
    # Security
    "passlib[bcrypt]>=1.7.4",
    "python-jose[cryptography]>=3.3.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.0",
    "pytest-cov>=5.0.0",
    "httpx>=0.28.1",
    
    # Development tools
    "black>=24.10.0",
    "isort>=5.13.2",
    "mypy>=1.11.2",
    "ruff>=0.1.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
]

[project.urls]
Homepage = "https://github.com/your-org/file-system"
Documentation = "https://file-system.readthedocs.io/"
Repository = "https://github.com/your-org/file-system.git"
Issues = "https://github.com/your-org/file-system/issues"
Changelog = "https://github.com/your-org/file-system/blob/main/CHANGELOG.md"

[project.scripts]
file-service = "src.file_service.app:main"
extraction-service = "src.extraction_service.app:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "magic.*",
    "alembic.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
    "src/*/tests",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "async: marks tests as async tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"*/tests/*" = ["B011"]
